#!/usr/bin/env node

process.chdir(process.cwd());

const minimist = require('minimist');
const fs = require('fs');
const path = require('path');
const chalk = require('chalk');
const sketchlint = require('../build');

const strippedArgv = process.argv.slice(2);
const {
  _: [sketchFilePath],
  config: configPath,
} = minimist(strippedArgv);

function printUsage() {
  console.log('Usage: sketchlint <sketchFilePath> --config <configFilePath>');
}

if (!sketchFilePath || !configPath) {
  printUsage();
  process.exit(1);
}

if (!fs.existsSync(configPath)) {
  console.log(`Config file path ${configPath} does not exist.`);
  process.exit(1);
}

if (!fs.existsSync(sketchFilePath)) {
  console.log(`Sketch file path ${sketchFilePath} does not exist.`);
  process.exit(1);
}

const config = require(path.resolve(process.cwd(), configPath));
const sketchData = fs.readFileSync(sketchFilePath);

sketchlint.default(sketchData, config).then(lintingErrors => {
  const groupedErrors = constructGroupedErrors(lintingErrors);
  const {message: resultMessage, errorCount} = constructResultMessage(lintingErrors);
  console.log(groupedErrors + resultMessage);
  process.exit(errorCount > 0 ? 1 : 0);
});

function constructGroupedErrors(lintingErrors) {
  const errorsPerPath = {};

  for (const {category, ruleID, message, type, path} of lintingErrors) {
    const coloredPath = chalk.underline(path);
    const coloredType = type === 'error' ? chalk.red(type) : chalk.yellow(type);
    const coloredRule = chalk.grey(`${category}.${ruleID}`);

    if (!errorsPerPath[path]) {
      errorsPerPath[path] = [];
    }

    errorsPerPath[path].push(`${coloredType} ${message} ${coloredRule}`);
  }

  let completeString = '';
  for (const path in errorsPerPath) {
    const errors = errorsPerPath[path].join('\n');
    const underlinedPath = chalk.underline(path);
    completeString += `${underlinedPath}\n${errors}\n\n`;
  }
  return completeString;
}

function constructResultMessage(lintingErrors) {
  function getCount(forType) {
    return lintingErrors.reduce(
      (currentCount, {type}) =>
        type === forType ? currentCount + 1 : currentCount,
      0,
    );
  }

  function formatPlural(string, count) {
    if (count > 1) {
      return `${string}s`;
    }
    return string;
  }

  function constructErrorDetails(errorString, warningsString) {
    if (!errorString && !warningsString) {
      return null;
    }
    let details = errorsString;
    if (warningsString && !errorsString) {
      details = warningsString;
    }
    if (warningsString && errorsString) {
      details = `${errorsString}, ${warningsString}`;
    }
    return `(${details})`;
  }

  const errorCount = getCount('error');
  const warningCount = getCount('warning');

  const errorsString =
    errorCount > 0 ? `${errorCount} ${formatPlural('error', errorCount)}` : '';
  const warningsString =
    warningCount > 0
      ? `${warningCount} ${formatPlural('warning', warningCount)}`
      : '';

  const problemCount = errorCount + warningCount;
  const problemDetails = constructErrorDetails(errorsString, warningsString);
  const problemText = `âœ– ${problemCount} ${formatPlural(
    'problem',
    problemCount,
  )} ${problemDetails}`;

  let message = chalk.green('All good.');

  if (problemCount > 0) {
    message = errorCount > 0 ? chalk.red(problemText) : chalk.yellow(problemText);
  }

  return {
    message,
    errorCount,
    problemCount,
  };
}
